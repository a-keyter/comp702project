"use client";

import React, { useState, useEffect, useRef } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Send } from "lucide-react";
import { fetchIssueMessages } from "@/lib/issueUtils/messageUtils/fetchMessagesByIssueId";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Skeleton } from "@/components/ui/skeleton";
import { sendNewMessage } from "@/lib/issueUtils/messageUtils/sendMessage";
import LoadingSpinner from "@/components/LoadingSpinner";


import { $Enums } from "@prisma/client";

type IssueMessage = {
  id: string;
  content: string;
  createdAt: Date;
  sender: {
    name: string;
    role: string;
  };
};

type IssueChatProps = {
  issueId: string;
  issueStatus: $Enums.IssueStatus;
  userRole: string;
  userName: string;

};

const messageSchema = z.object({
  content: z
    .string()
    .min(1, "Message cannot be empty")
    .max(1000, "Message is too long"),
});

type MessageFormData = z.infer<typeof messageSchema>;

export default function IssueChat({
  issueId,
  userRole,
  userName,
}: IssueChatProps) {
  const [messages, setMessages] = useState<IssueMessage[]>([]);
  const [loading, setLoading] = useState(true);
  const [sendLoading, setSendLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<MessageFormData>({
    resolver: zodResolver(messageSchema),
  });

  useEffect(() => {
    const loadMessages = async () => {
      setLoading(true);
      const fetchedMessages = await fetchIssueMessages(issueId);
      if (fetchedMessages) {
        setMessages(fetchedMessages);
      }
      setLoading(false);
      messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    loadMessages();
  }, [issueId]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const onSubmit = async (data: MessageFormData) => {
    try {
      setSendLoading(true);
      // Attempt to send the message
      await sendNewMessage(issueId, data.content);
      // Then add it to the local state
      const newMessage: IssueMessage = {
        id: Date.now().toString(), // This should be generated by the server in a real app
        content: data.content,
        createdAt: new Date(),
        sender: {
          name: userName,
          role: userRole,
        },
      };
      setMessages((prevMessages) => [newMessage, ...prevMessages]);
      reset();
      setSendLoading(false);
    } catch (error) {
      console.error("Error sending message:", error);
      setSendLoading(false);
    }
  };

  return (
    <Card className="flex flex-col h-full max-h-[400px] pt-4">
      <CardContent className="flex-1 overflow-y-auto p-4">
        {loading ? (
          <Skeleton className="h-full w-full" />
        ) : (
          <div className="gap-y-2 flex flex-col-reverse">
            <div ref={messagesEndRef} />
            {messages.map((message) => (
              <div
                key={message.id}
                className={`p-2 rounded-lg border ${
                  userName === message.sender.name
                    ? "bg-blue-100"
                    : "bg-gray-100"
                }`}
              >
                <div className="flex justify-between items-center my-2">
                  <p>
                    <span className="font-bold">
                      {userName === message.sender.name
                        ? "You"
                        : message.sender.name}{" "}
                    </span>
                    (
                    {message.sender.role.charAt(0).toUpperCase() +
                      message.sender.role.slice(1).toLowerCase()}
                    ) -{" "}
                    <span className="text-xs text-gray-500 text-right">
                      {new Date(message.createdAt).toLocaleString()}
                    </span>
                  </p>
                </div>
                <p>{message.content}</p>
              </div>
            ))}
          </div>
        )}
      </CardContent>
      <div className="p-4 bg-gray-600 rounded-b-md">
        <form onSubmit={handleSubmit(onSubmit)} className="flex gap-x-2">
          <Input
            {...register("content")}
            placeholder="Enter your message here..."
            className="flex-1"
          />
          <Button
            type="submit"
            variant={"outline"}
            disabled={messages[0]?.sender.name === userName || false}
          >
            {sendLoading === true ? (
              <LoadingSpinner />
            ) : (
              <>
                {" "}
                Send <Send className="ml-2 h-4 w-4" />{" "}
              </>
            )}
          </Button>
        </form>
        {errors.content && (
          <p className="text-red-500 text-sm mt-1">{errors.content.message}</p>
        )}
      </div>
    </Card>
  );
}
