generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


// This model is used to store users.
enum Role {
  TEACHER
  STUDENT
}

model User {
  id                 String         @id
  name               String
  nickname           String         @unique
  email              String         @unique
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  role               Role
  taughtClasses      Class[]        @relation("TaughtBy")
  memberOfClasses    Class[]        @relation("ClassMembers")
  createdAssessments Assessment[]   @relation("AssessmentCreator")
  submissions        Submission[]   @relation("UserSubmissions")
  responses          Response[]     @relation("UserResponses")
  raisedIssues       Issue[]        @relation("UserIssues")
  messages           Message[]      @relation("UserMessages")
  lastUpdatedIssues  Issue[]        @relation("LastUpdatedBy")
  receivedNotifications Notification[] @relation("UserNotifications")
  sentNotifications  Notification[] @relation("NotificationSender")
  queuedStudents QueuedClassJoin[] @relation("QueuedStudents")
}

// This model is used to store classes.
model Class {
  id            String         @id
  title         String
  description   String
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  taughtBy      User[]         @relation("TaughtBy")
  members       User[]         @relation("ClassMembers")
  assessments   Assessment[]   @relation("ClassAssessments")
  issues        Issue[]        @relation("ClassIssues")
  notifications Notification[] @relation("ClassNotifications")
  futureStudents QueuedClassJoin[] @relation("FutureClassStudents")
}

// This model is used to store assessments.
enum AssessmentStatus {
  DRAFT
  LIVE
}


model Assessment {
  id              String           @id @default(uuid())
  title           String
  objectives      String
  status          AssessmentStatus @default(DRAFT)
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
  dueDate         DateTime
  createdBy       User             @relation("AssessmentCreator", fields: [createdById], references: [id])
  createdById     String
  class           Class            @relation("ClassAssessments", fields: [classId], references: [id], onDelete: Cascade)
  classId         String
  assessmentItems AssessmentItem[]
  submissions     Submission[]
  issues          Issue[]          @relation("AssessmentIssues")
  teacherFeedback TeacherFeedback?
  notifications   Notification[]   @relation("AssessmentNotifications")
}

// This model is used to store assessment items.
enum AssessmentItemType {
  MCQ
  CONTEXT
}

model AssessmentItem {
  id             String             @id @default(uuid())
  index          Int
  content        String
  type           AssessmentItemType
  assessment     Assessment         @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId   String
  responses      Response[]
  answers        Answer[]           @relation("AssessmentItemToAnswer")
  issues         Issue[]
}

// This model is used to store answers to assessment items.
model Answer {
  id               String         @id @default(uuid())
  content          String
  isCorrect        Boolean
  assessmentItem   AssessmentItem @relation("AssessmentItemToAnswer", fields: [assessmentItemId], references: [id], onDelete: Cascade)
  assessmentItemId String
  responses        Response[]
}

// This model is used to store teacher feedback for assessments.
model TeacherFeedback {
  id               String     @id @default(uuid())
  content          String
  assessment       Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId     String     @unique
  submissionCount  Int
  lastSubmission   Submission @relation(fields: [lastSubmissionId], references: [id], onDelete: Cascade)
  lastSubmissionId String     @unique
  createdAt        DateTime   @default(now()) @map(name: "created_at")
}


// This model is used to store submissions for assessments.
model Submission {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now()) @map(name: "created_at")
  assessment       Assessment       @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId     String
  user             User             @relation("UserSubmissions", fields: [userId], references: [id])
  userId           String
  responses        Response[]
  feedback         String?
  score            Float?
  teacherFeedback  TeacherFeedback?
  issues           Issue[]
}

// This model is used to store responses to assessment items.
model Response {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  submission       Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  assessmentItem   AssessmentItem @relation(fields: [assessmentItemId], references: [id], onDelete: Cascade)
  assessmentItemId String
  user             User           @relation("UserResponses", fields: [userId], references: [id])
  userId           String
  givenAnswer      Answer         @relation(fields: [givenAnswerId], references: [id], onDelete: Cascade)
  givenAnswerId    String
  isCorrect        Boolean
}

// This model is used to store issues raised by users.
enum IssueType {
  CLASS_JOIN_REQUEST
  QUESTION_ISSUE
  FEEDBACK_ISSUE
}

enum IssueStatus {
  UNREAD
  OPEN
  RESOLVED
  REJECTED
}

model Issue {
  id                    String         @id @default(uuid())
  type                  IssueType
  status                IssueStatus    @default(UNREAD)
  createdAt             DateTime       @default(now()) @map(name: "created_at")
  updatedAt             DateTime       @updatedAt @map(name: "updated_at")
  raisedBy              User           @relation("UserIssues", fields: [raisedById], references: [id])
  raisedById            String
  lastUpdatedBy         User           @relation("LastUpdatedBy", fields: [lastUpdatedById], references: [id])
  lastUpdatedById       String
  relevantClass         Class          @relation("ClassIssues", fields: [relevantClassId], references: [id], onDelete: Cascade)
  relevantClassId       String
  relevantAssessment    Assessment?    @relation("AssessmentIssues", fields: [relevantAssessmentId], references: [id], onDelete: Cascade)
  relevantAssessmentId  String?
  messages              Message[]      @relation("IssueMessages")
  notifications         Notification[] @relation("IssueNotifications")
  
  // Fields for question issues
  question              String?
  givenAnswer           String?
  correctAnswer         String?
  assessmentItem        AssessmentItem? @relation(fields: [assessmentItemId], references: [id], onDelete: SetNull)
  assessmentItemId      String?
  
  // Fields for feedback issues
  feedback              String?
  submission            Submission? @relation(fields: [submissionId], references: [id], onDelete: SetNull)
  submissionId          String?
}

// This model is used to store messages for issues.
model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  sender    User?     @relation("UserMessages", fields: [senderId], references: [id], onDelete: SetNull)
  senderId  String?
  issue     Issue    @relation("IssueMessages", fields: [issueId], references: [id], onDelete: Cascade)
  issueId   String
}

// This model is used to store notifications for users. # Added later in the project
enum NotificationType {
  NEW_ASSESSMENT
  CLASS_JOIN_REQUEST
  CLASS_JOIN_REJECTED
  CLASS_JOIN_ACCEPTED
  FEEDBACK_ISSUE_RAISED
  QUESTION_ISSUE_RAISED
  NEW_ISSUE_MESSAGE
  CLASS_REMOVAL
}

model Notification {
  id           String           @id @default(uuid())
  type         NotificationType
  recipient    User             @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId  String
  sender       User             @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId     String
  class        Class?           @relation("ClassNotifications", fields: [classId], references: [id], onDelete: Cascade)
  classId      String?
  assessment   Assessment?      @relation("AssessmentNotifications", fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String?
  issue        Issue?           @relation("IssueNotifications", fields: [issueId], references: [id], onDelete: Cascade)
  issueId      String?
  is_unread    Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@unique([type, issueId, senderId, recipientId])
}

// This model is used to store student emails who have been added to a class but not yet created an account.
model QueuedClassJoin {
  id           String           @id @default(uuid())
  email        String
  class        Class?           @relation("FutureClassStudents", fields: [classId], references: [id], onDelete: Cascade)
  classId      String? 
  raisedBy     User           @relation("QueuedStudents", fields: [raisedById], references: [id])
  raisedById   String
}