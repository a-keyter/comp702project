generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  TEACHER
  STUDENT
}

enum AssessmentItemType {
  MCQ
  CONTEXT
}

model User {
  id                 String       @id
  name               String
  nickname           String       @unique
  createdAt          DateTime     @default(now()) @map(name: "created_at")
  updatedAt          DateTime     @updatedAt @map(name: "updated_at")
  role               Role
  createdClasses     Class[]      @relation("CreatedBy")
  memberOfClasses    Class[]      @relation("ClassMembers")
  createdAssessments Assessment[] @relation("AssessmentCreator")
  submissions        Submission[] @relation("UserSubmissions")
  responses          Response[]   @relation("UserResponses")
}

model Class {
  id          String       @id
  title       String
  description String
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  createdBy   User         @relation("CreatedBy", fields: [createdById], references: [id])
  createdById String
  members     User[]       @relation("ClassMembers")
  assessments Assessment[] @relation("ClassAssessments")
}

model Assessment {
  id              String           @id @default(uuid())
  title           String
  objectives      String
  overallFeedback String?
  createdAt       DateTime         @default(now()) @map(name: "created_at")
  updatedAt       DateTime         @updatedAt @map(name: "updated_at")
  createdBy       User             @relation("AssessmentCreator", fields: [createdById], references: [id])
  createdById     String
  class           Class            @relation("ClassAssessments", fields: [classId], references: [id], onDelete: Cascade)
  classId         String
  assessmentItems AssessmentItem[]
  submissions     Submission[]
}

model AssessmentItem {
  id             String             @id @default(uuid())
  index          Int
  content        String
  type           AssessmentItemType
  assessment     Assessment         @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId   String
  responses      Response[]
  answers        Answer[]           @relation("AssessmentItemToAnswer")
}

model Answer {
  id               String         @id @default(uuid())
  content          String
  isCorrect        Boolean
  assessmentItem   AssessmentItem @relation("AssessmentItemToAnswer", fields: [assessmentItemId], references: [id], onDelete: Cascade)
  assessmentItemId String
  responses        Response[] 
}

model Submission {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  assessment   Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  assessmentId String
  user         User       @relation("UserSubmissions", fields: [userId], references: [id])
  userId       String
  responses    Response[]
  feedback     String?
  score        Float?
}

model Response {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  submission       Submission     @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId     String
  assessmentItem   AssessmentItem @relation(fields: [assessmentItemId], references: [id])
  assessmentItemId String
  user             User           @relation("UserResponses", fields: [userId], references: [id])
  userId           String
  givenAnswer      Answer         @relation(fields: [givenAnswerId], references: [id])
  givenAnswerId    String
  isCorrect        Boolean
}
